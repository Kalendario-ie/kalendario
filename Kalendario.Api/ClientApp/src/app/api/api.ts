/* tslint:disable */
/* eslint-disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.15.5.0 (NJsonSchema v10.6.6.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------
// ReSharper disable InconsistentNaming

import axios, { AxiosError, AxiosInstance, AxiosRequestConfig, AxiosResponse, CancelToken } from 'axios';

import * as moment from 'moment';

export interface IAccountsClient {
    /**
     * @param body (optional)
     * @return Success
     */
    accounts(body: CreateAccountCommand | undefined): Promise<string>;
}

export class AccountsClient implements IAccountsClient {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {

        this.instance = instance ? instance : axios.create();

        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";

    }

    /**
     * @param body (optional)
     * @return Success
     */
    accounts(body: CreateAccountCommand | undefined , cancelToken?: CancelToken | undefined): Promise<string> {
        let url_ = this.baseUrl + "/api/Accounts";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processAccounts(_response);
        });
    }

    protected processAccounts(response: AxiosResponse): Promise<string> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = JSON.parse(resultData200);
            return Promise.resolve<string>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<string>(<any>null);
    }
}

export interface IAppointmentsClient {
    /**
     * @param fromDate (optional)
     * @param toDate (optional)
     * @param customerId (optional)
     * @param employeeIds (optional)
     * @return Success
     */
    appointmentsGet(fromDate: moment.Moment | undefined, toDate: moment.Moment | undefined, customerId: string | undefined, employeeIds: string[] | undefined): Promise<GetAppointmentsResult>;
    /**
     * @param body (optional)
     * @return Success
     */
    appointmentsPost(body: UpsertAppointmentCommand | undefined): Promise<AppointmentAdminResourceModel>;
    /**
     * @param body (optional)
     * @return Success
     */
    appointmentsPut(id: string, body: UpsertAppointmentCommand | undefined): Promise<AppointmentAdminResourceModel>;
}

export class AppointmentsClient implements IAppointmentsClient {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {

        this.instance = instance ? instance : axios.create();

        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";

    }

    /**
     * @param fromDate (optional)
     * @param toDate (optional)
     * @param customerId (optional)
     * @param employeeIds (optional)
     * @return Success
     */
    appointmentsGet(fromDate: moment.Moment | undefined, toDate: moment.Moment | undefined, customerId: string | undefined, employeeIds: string[] | undefined , cancelToken?: CancelToken | undefined): Promise<GetAppointmentsResult> {
        let url_ = this.baseUrl + "/api/Appointments?";
        if (fromDate === null)
            throw new Error("The parameter 'fromDate' cannot be null.");
        else if (fromDate !== undefined)
            url_ += "FromDate=" + encodeURIComponent(fromDate ? "" + fromDate.toJSON() : "") + "&";
        if (toDate === null)
            throw new Error("The parameter 'toDate' cannot be null.");
        else if (toDate !== undefined)
            url_ += "ToDate=" + encodeURIComponent(toDate ? "" + toDate.toJSON() : "") + "&";
        if (customerId === null)
            throw new Error("The parameter 'customerId' cannot be null.");
        else if (customerId !== undefined)
            url_ += "CustomerId=" + encodeURIComponent("" + customerId) + "&";
        if (employeeIds === null)
            throw new Error("The parameter 'employeeIds' cannot be null.");
        else if (employeeIds !== undefined)
            employeeIds && employeeIds.forEach(item => { url_ += "EmployeeIds=" + encodeURIComponent("" + item) + "&"; });
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processAppointmentsGet(_response);
        });
    }

    protected processAppointmentsGet(response: AxiosResponse): Promise<GetAppointmentsResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = JSON.parse(resultData200);
            return Promise.resolve<GetAppointmentsResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<GetAppointmentsResult>(<any>null);
    }

    /**
     * @param body (optional)
     * @return Success
     */
    appointmentsPost(body: UpsertAppointmentCommand | undefined , cancelToken?: CancelToken | undefined): Promise<AppointmentAdminResourceModel> {
        let url_ = this.baseUrl + "/api/Appointments";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processAppointmentsPost(_response);
        });
    }

    protected processAppointmentsPost(response: AxiosResponse): Promise<AppointmentAdminResourceModel> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = JSON.parse(resultData200);
            return Promise.resolve<AppointmentAdminResourceModel>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<AppointmentAdminResourceModel>(<any>null);
    }

    /**
     * @param body (optional)
     * @return Success
     */
    appointmentsPut(id: string, body: UpsertAppointmentCommand | undefined , cancelToken?: CancelToken | undefined): Promise<AppointmentAdminResourceModel> {
        let url_ = this.baseUrl + "/api/Appointments/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "PUT",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processAppointmentsPut(_response);
        });
    }

    protected processAppointmentsPut(response: AxiosResponse): Promise<AppointmentAdminResourceModel> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = JSON.parse(resultData200);
            return Promise.resolve<AppointmentAdminResourceModel>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<AppointmentAdminResourceModel>(<any>null);
    }
}

export interface ICustomersClient {
    /**
     * @param search (optional)
     * @param start (optional)
     * @param length (optional)
     * @return Success
     */
    customersGet(search: string | undefined, start: number | undefined, length: number | undefined): Promise<CustomerAdminResourceModelGetAllResult>;
    /**
     * @param body (optional)
     * @return Success
     */
    customersPost(body: UpsertCustomerCommand | undefined): Promise<CustomerAdminResourceModel>;
    /**
     * @param body (optional)
     * @return Success
     */
    customersPut(id: string, body: UpsertCustomerCommand | undefined): Promise<CustomerAdminResourceModel>;
}

export class CustomersClient implements ICustomersClient {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {

        this.instance = instance ? instance : axios.create();

        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";

    }

    /**
     * @param search (optional)
     * @param start (optional)
     * @param length (optional)
     * @return Success
     */
    customersGet(search: string | undefined, start: number | undefined, length: number | undefined , cancelToken?: CancelToken | undefined): Promise<CustomerAdminResourceModelGetAllResult> {
        let url_ = this.baseUrl + "/api/Customers?";
        if (search === null)
            throw new Error("The parameter 'search' cannot be null.");
        else if (search !== undefined)
            url_ += "Search=" + encodeURIComponent("" + search) + "&";
        if (start === null)
            throw new Error("The parameter 'start' cannot be null.");
        else if (start !== undefined)
            url_ += "Start=" + encodeURIComponent("" + start) + "&";
        if (length === null)
            throw new Error("The parameter 'length' cannot be null.");
        else if (length !== undefined)
            url_ += "Length=" + encodeURIComponent("" + length) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processCustomersGet(_response);
        });
    }

    protected processCustomersGet(response: AxiosResponse): Promise<CustomerAdminResourceModelGetAllResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = JSON.parse(resultData200);
            return Promise.resolve<CustomerAdminResourceModelGetAllResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CustomerAdminResourceModelGetAllResult>(<any>null);
    }

    /**
     * @param body (optional)
     * @return Success
     */
    customersPost(body: UpsertCustomerCommand | undefined , cancelToken?: CancelToken | undefined): Promise<CustomerAdminResourceModel> {
        let url_ = this.baseUrl + "/api/Customers";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processCustomersPost(_response);
        });
    }

    protected processCustomersPost(response: AxiosResponse): Promise<CustomerAdminResourceModel> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = JSON.parse(resultData200);
            return Promise.resolve<CustomerAdminResourceModel>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CustomerAdminResourceModel>(<any>null);
    }

    /**
     * @param body (optional)
     * @return Success
     */
    customersPut(id: string, body: UpsertCustomerCommand | undefined , cancelToken?: CancelToken | undefined): Promise<CustomerAdminResourceModel> {
        let url_ = this.baseUrl + "/api/Customers/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "PUT",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processCustomersPut(_response);
        });
    }

    protected processCustomersPut(response: AxiosResponse): Promise<CustomerAdminResourceModel> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = JSON.parse(resultData200);
            return Promise.resolve<CustomerAdminResourceModel>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CustomerAdminResourceModel>(<any>null);
    }
}

export interface IEmployeesClient {
    /**
     * @param search (optional)
     * @param start (optional)
     * @param length (optional)
     * @return Success
     */
    employeesGet(search: string | undefined, start: number | undefined, length: number | undefined): Promise<EmployeeAdminResourceModelGetAllResult>;
    /**
     * @param body (optional)
     * @return Success
     */
    employeesPost(body: UpsertEmployeeCommand | undefined): Promise<EmployeeAdminResourceModel>;
    /**
     * @param body (optional)
     * @return Success
     */
    employeesPut(id: string, body: UpsertEmployeeCommand | undefined): Promise<EmployeeAdminResourceModel>;
}

export class EmployeesClient implements IEmployeesClient {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {

        this.instance = instance ? instance : axios.create();

        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";

    }

    /**
     * @param search (optional)
     * @param start (optional)
     * @param length (optional)
     * @return Success
     */
    employeesGet(search: string | undefined, start: number | undefined, length: number | undefined , cancelToken?: CancelToken | undefined): Promise<EmployeeAdminResourceModelGetAllResult> {
        let url_ = this.baseUrl + "/api/Employees?";
        if (search === null)
            throw new Error("The parameter 'search' cannot be null.");
        else if (search !== undefined)
            url_ += "Search=" + encodeURIComponent("" + search) + "&";
        if (start === null)
            throw new Error("The parameter 'start' cannot be null.");
        else if (start !== undefined)
            url_ += "Start=" + encodeURIComponent("" + start) + "&";
        if (length === null)
            throw new Error("The parameter 'length' cannot be null.");
        else if (length !== undefined)
            url_ += "Length=" + encodeURIComponent("" + length) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processEmployeesGet(_response);
        });
    }

    protected processEmployeesGet(response: AxiosResponse): Promise<EmployeeAdminResourceModelGetAllResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = JSON.parse(resultData200);
            return Promise.resolve<EmployeeAdminResourceModelGetAllResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<EmployeeAdminResourceModelGetAllResult>(<any>null);
    }

    /**
     * @param body (optional)
     * @return Success
     */
    employeesPost(body: UpsertEmployeeCommand | undefined , cancelToken?: CancelToken | undefined): Promise<EmployeeAdminResourceModel> {
        let url_ = this.baseUrl + "/api/Employees";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processEmployeesPost(_response);
        });
    }

    protected processEmployeesPost(response: AxiosResponse): Promise<EmployeeAdminResourceModel> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = JSON.parse(resultData200);
            return Promise.resolve<EmployeeAdminResourceModel>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<EmployeeAdminResourceModel>(<any>null);
    }

    /**
     * @param body (optional)
     * @return Success
     */
    employeesPut(id: string, body: UpsertEmployeeCommand | undefined , cancelToken?: CancelToken | undefined): Promise<EmployeeAdminResourceModel> {
        let url_ = this.baseUrl + "/api/Employees/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "PUT",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processEmployeesPut(_response);
        });
    }

    protected processEmployeesPut(response: AxiosResponse): Promise<EmployeeAdminResourceModel> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = JSON.parse(resultData200);
            return Promise.resolve<EmployeeAdminResourceModel>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<EmployeeAdminResourceModel>(<any>null);
    }
}

export interface IOidcConfigurationClient {
    /**
     * @return Success
     */
    _configuration(clientId: string): Promise<void>;
}

export class OidcConfigurationClient implements IOidcConfigurationClient {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {

        this.instance = instance ? instance : axios.create();

        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";

    }

    /**
     * @return Success
     */
    _configuration(clientId: string , cancelToken?: CancelToken | undefined): Promise<void> {
        let url_ = this.baseUrl + "/_configuration/{clientId}";
        if (clientId === undefined || clientId === null)
            throw new Error("The parameter 'clientId' must be defined.");
        url_ = url_.replace("{clientId}", encodeURIComponent("" + clientId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.process_configuration(_response);
        });
    }

    protected process_configuration(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(<any>null);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any>null);
    }
}

export interface ISchedulesClient {
    /**
     * @param search (optional)
     * @param start (optional)
     * @param length (optional)
     * @return Success
     */
    schedulesGet(search: string | undefined, start: number | undefined, length: number | undefined): Promise<ScheduleAdminResourceModelGetAllResult>;
    /**
     * @param body (optional)
     * @return Success
     */
    schedulesPost(body: UpsertScheduleCommand | undefined): Promise<ScheduleAdminResourceModel>;
    /**
     * @param body (optional)
     * @return Success
     */
    schedulesPut(id: string, body: UpsertScheduleCommand | undefined): Promise<ScheduleAdminResourceModel>;
}

export class SchedulesClient implements ISchedulesClient {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {

        this.instance = instance ? instance : axios.create();

        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";

    }

    /**
     * @param search (optional)
     * @param start (optional)
     * @param length (optional)
     * @return Success
     */
    schedulesGet(search: string | undefined, start: number | undefined, length: number | undefined , cancelToken?: CancelToken | undefined): Promise<ScheduleAdminResourceModelGetAllResult> {
        let url_ = this.baseUrl + "/api/Schedules?";
        if (search === null)
            throw new Error("The parameter 'search' cannot be null.");
        else if (search !== undefined)
            url_ += "Search=" + encodeURIComponent("" + search) + "&";
        if (start === null)
            throw new Error("The parameter 'start' cannot be null.");
        else if (start !== undefined)
            url_ += "Start=" + encodeURIComponent("" + start) + "&";
        if (length === null)
            throw new Error("The parameter 'length' cannot be null.");
        else if (length !== undefined)
            url_ += "Length=" + encodeURIComponent("" + length) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processSchedulesGet(_response);
        });
    }

    protected processSchedulesGet(response: AxiosResponse): Promise<ScheduleAdminResourceModelGetAllResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = JSON.parse(resultData200);
            return Promise.resolve<ScheduleAdminResourceModelGetAllResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ScheduleAdminResourceModelGetAllResult>(<any>null);
    }

    /**
     * @param body (optional)
     * @return Success
     */
    schedulesPost(body: UpsertScheduleCommand | undefined , cancelToken?: CancelToken | undefined): Promise<ScheduleAdminResourceModel> {
        let url_ = this.baseUrl + "/api/Schedules";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processSchedulesPost(_response);
        });
    }

    protected processSchedulesPost(response: AxiosResponse): Promise<ScheduleAdminResourceModel> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = JSON.parse(resultData200);
            return Promise.resolve<ScheduleAdminResourceModel>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ScheduleAdminResourceModel>(<any>null);
    }

    /**
     * @param body (optional)
     * @return Success
     */
    schedulesPut(id: string, body: UpsertScheduleCommand | undefined , cancelToken?: CancelToken | undefined): Promise<ScheduleAdminResourceModel> {
        let url_ = this.baseUrl + "/api/Schedules/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "PUT",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processSchedulesPut(_response);
        });
    }

    protected processSchedulesPut(response: AxiosResponse): Promise<ScheduleAdminResourceModel> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = JSON.parse(resultData200);
            return Promise.resolve<ScheduleAdminResourceModel>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ScheduleAdminResourceModel>(<any>null);
    }
}

export interface IServiceCategoriesClient {
    /**
     * @param search (optional)
     * @param start (optional)
     * @param length (optional)
     * @return Success
     */
    serviceCategoriesGet(search: string | undefined, start: number | undefined, length: number | undefined): Promise<ServiceCategoryAdminResourceModelGetAllResult>;
    /**
     * @param body (optional)
     * @return Success
     */
    serviceCategoriesPost(body: UpsertServiceCategoryCommand | undefined): Promise<ServiceCategoryAdminResourceModel>;
    /**
     * @param body (optional)
     * @return Success
     */
    serviceCategoriesPut(id: string, body: UpsertServiceCategoryCommand | undefined): Promise<ServiceCategoryAdminResourceModel>;
}

export class ServiceCategoriesClient implements IServiceCategoriesClient {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {

        this.instance = instance ? instance : axios.create();

        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";

    }

    /**
     * @param search (optional)
     * @param start (optional)
     * @param length (optional)
     * @return Success
     */
    serviceCategoriesGet(search: string | undefined, start: number | undefined, length: number | undefined , cancelToken?: CancelToken | undefined): Promise<ServiceCategoryAdminResourceModelGetAllResult> {
        let url_ = this.baseUrl + "/api/ServiceCategories?";
        if (search === null)
            throw new Error("The parameter 'search' cannot be null.");
        else if (search !== undefined)
            url_ += "Search=" + encodeURIComponent("" + search) + "&";
        if (start === null)
            throw new Error("The parameter 'start' cannot be null.");
        else if (start !== undefined)
            url_ += "Start=" + encodeURIComponent("" + start) + "&";
        if (length === null)
            throw new Error("The parameter 'length' cannot be null.");
        else if (length !== undefined)
            url_ += "Length=" + encodeURIComponent("" + length) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processServiceCategoriesGet(_response);
        });
    }

    protected processServiceCategoriesGet(response: AxiosResponse): Promise<ServiceCategoryAdminResourceModelGetAllResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = JSON.parse(resultData200);
            return Promise.resolve<ServiceCategoryAdminResourceModelGetAllResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ServiceCategoryAdminResourceModelGetAllResult>(<any>null);
    }

    /**
     * @param body (optional)
     * @return Success
     */
    serviceCategoriesPost(body: UpsertServiceCategoryCommand | undefined , cancelToken?: CancelToken | undefined): Promise<ServiceCategoryAdminResourceModel> {
        let url_ = this.baseUrl + "/api/ServiceCategories";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processServiceCategoriesPost(_response);
        });
    }

    protected processServiceCategoriesPost(response: AxiosResponse): Promise<ServiceCategoryAdminResourceModel> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = JSON.parse(resultData200);
            return Promise.resolve<ServiceCategoryAdminResourceModel>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ServiceCategoryAdminResourceModel>(<any>null);
    }

    /**
     * @param body (optional)
     * @return Success
     */
    serviceCategoriesPut(id: string, body: UpsertServiceCategoryCommand | undefined , cancelToken?: CancelToken | undefined): Promise<ServiceCategoryAdminResourceModel> {
        let url_ = this.baseUrl + "/api/ServiceCategories/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "PUT",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processServiceCategoriesPut(_response);
        });
    }

    protected processServiceCategoriesPut(response: AxiosResponse): Promise<ServiceCategoryAdminResourceModel> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = JSON.parse(resultData200);
            return Promise.resolve<ServiceCategoryAdminResourceModel>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ServiceCategoryAdminResourceModel>(<any>null);
    }
}

export interface IServicesClient {
    /**
     * @param search (optional)
     * @param start (optional)
     * @param length (optional)
     * @return Success
     */
    servicesGet(search: string | undefined, start: number | undefined, length: number | undefined): Promise<ServiceAdminResourceModelGetAllResult>;
    /**
     * @param body (optional)
     * @return Success
     */
    servicesPost(body: UpsertServiceCommand | undefined): Promise<ServiceAdminResourceModel>;
    /**
     * @param body (optional)
     * @return Success
     */
    servicesPut(id: string, body: UpsertServiceCommand | undefined): Promise<ServiceAdminResourceModel>;
}

export class ServicesClient implements IServicesClient {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {

        this.instance = instance ? instance : axios.create();

        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";

    }

    /**
     * @param search (optional)
     * @param start (optional)
     * @param length (optional)
     * @return Success
     */
    servicesGet(search: string | undefined, start: number | undefined, length: number | undefined , cancelToken?: CancelToken | undefined): Promise<ServiceAdminResourceModelGetAllResult> {
        let url_ = this.baseUrl + "/api/Services?";
        if (search === null)
            throw new Error("The parameter 'search' cannot be null.");
        else if (search !== undefined)
            url_ += "Search=" + encodeURIComponent("" + search) + "&";
        if (start === null)
            throw new Error("The parameter 'start' cannot be null.");
        else if (start !== undefined)
            url_ += "Start=" + encodeURIComponent("" + start) + "&";
        if (length === null)
            throw new Error("The parameter 'length' cannot be null.");
        else if (length !== undefined)
            url_ += "Length=" + encodeURIComponent("" + length) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processServicesGet(_response);
        });
    }

    protected processServicesGet(response: AxiosResponse): Promise<ServiceAdminResourceModelGetAllResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = JSON.parse(resultData200);
            return Promise.resolve<ServiceAdminResourceModelGetAllResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ServiceAdminResourceModelGetAllResult>(<any>null);
    }

    /**
     * @param body (optional)
     * @return Success
     */
    servicesPost(body: UpsertServiceCommand | undefined , cancelToken?: CancelToken | undefined): Promise<ServiceAdminResourceModel> {
        let url_ = this.baseUrl + "/api/Services";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processServicesPost(_response);
        });
    }

    protected processServicesPost(response: AxiosResponse): Promise<ServiceAdminResourceModel> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = JSON.parse(resultData200);
            return Promise.resolve<ServiceAdminResourceModel>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ServiceAdminResourceModel>(<any>null);
    }

    /**
     * @param body (optional)
     * @return Success
     */
    servicesPut(id: string, body: UpsertServiceCommand | undefined , cancelToken?: CancelToken | undefined): Promise<ServiceAdminResourceModel> {
        let url_ = this.baseUrl + "/api/Services/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "PUT",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processServicesPut(_response);
        });
    }

    protected processServicesPut(response: AxiosResponse): Promise<ServiceAdminResourceModel> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = JSON.parse(resultData200);
            return Promise.resolve<ServiceAdminResourceModel>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ServiceAdminResourceModel>(<any>null);
    }
}

export interface IWeatherForecastClient {
    /**
     * @return Success
     */
    weatherForecast(): Promise<WeatherForecast[]>;
}

export class WeatherForecastClient implements IWeatherForecastClient {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {

        this.instance = instance ? instance : axios.create();

        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";

    }

    /**
     * @return Success
     */
    weatherForecast(  cancelToken?: CancelToken | undefined): Promise<WeatherForecast[]> {
        let url_ = this.baseUrl + "/api/WeatherForecast";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processWeatherForecast(_response);
        });
    }

    protected processWeatherForecast(response: AxiosResponse): Promise<WeatherForecast[]> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = JSON.parse(resultData200);
            return Promise.resolve<WeatherForecast[]>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<WeatherForecast[]>(<any>null);
    }
}

export interface AppointmentAdminResourceModel {
    id: string;
    customer: CustomerAdminResourceModel;
    employee: EmployeeAdminResourceModel;
    service: ServiceAdminResourceModel;
    start: moment.Moment;
    end: moment.Moment;
    price: number;
    internalNotes: string | undefined;
}

export interface Colour {
    readonly code: string | undefined;
}

export interface CreateAccountCommand {
    name: string | undefined;
}

export interface CreateScheduleFrame {
    start: string;
    end: string;
}

export interface CustomerAdminResourceModel {
    id: string;
    name: string;
    phoneNumber: string | undefined;
    email: string | undefined;
    warning: string | undefined;
}

export interface CustomerAdminResourceModelGetAllResult {
    entities: CustomerAdminResourceModel[] | undefined;
    filteredCount: number;
    totalCount: number;
}

export interface EmployeeAdminResourceModel {
    id: string;
    name: string;
    email: string | undefined;
    phoneNumber: string | undefined;
    scheduleId: string | undefined;
    services: string[] | undefined;
}

export interface EmployeeAdminResourceModelGetAllResult {
    entities: EmployeeAdminResourceModel[] | undefined;
    filteredCount: number;
    totalCount: number;
}

export interface GetAppointmentsResult {
    entities: AppointmentAdminResourceModel[] | undefined;
}

export interface ScheduleAdminResourceModel {
    id: string;
    name: string;
    sunday: ScheduleFrameAdminResourceModel[];
    monday: ScheduleFrameAdminResourceModel[];
    tuesday: ScheduleFrameAdminResourceModel[];
    wednesday: ScheduleFrameAdminResourceModel[];
    thursday: ScheduleFrameAdminResourceModel[];
    friday: ScheduleFrameAdminResourceModel[];
    saturday: ScheduleFrameAdminResourceModel[];
}

export interface ScheduleAdminResourceModelGetAllResult {
    entities: ScheduleAdminResourceModel[] | undefined;
    filteredCount: number;
    totalCount: number;
}

export interface ScheduleFrameAdminResourceModel {
    start: string;
    end: string;
}

export interface ServiceAdminResourceModel {
    id: string;
    name: string;
    description: string | undefined;
    price: number;
    duration: string;
    serviceCategoryId: string | undefined;
}

export interface ServiceAdminResourceModelGetAllResult {
    entities: ServiceAdminResourceModel[] | undefined;
    filteredCount: number;
    totalCount: number;
}

export interface ServiceCategoryAdminResourceModel {
    id: string;
    name: string;
    colour: Colour;
}

export interface ServiceCategoryAdminResourceModelGetAllResult {
    entities: ServiceCategoryAdminResourceModel[] | undefined;
    filteredCount: number;
    totalCount: number;
}

export interface UpsertAppointmentCommand {
    start: moment.Moment;
    end: moment.Moment | undefined;
    internalNotes: string | undefined;
    customerId: string;
    employeeId: string;
    serviceId: string;
    ignoreTimeClashes: boolean;
}

export interface UpsertCustomerCommand {
    name: string | undefined;
    phoneNumber: string | undefined;
    email: string | undefined;
    warning: string | undefined;
}

export interface UpsertEmployeeCommand {
    name: string | undefined;
    email: string | undefined;
    phoneNumber: string | undefined;
    scheduleId: string | undefined;
    services: string[] | undefined;
}

export interface UpsertScheduleCommand {
    name: string | undefined;
    sunday: CreateScheduleFrame[] | undefined;
    monday: CreateScheduleFrame[] | undefined;
    tuesday: CreateScheduleFrame[] | undefined;
    wednesday: CreateScheduleFrame[] | undefined;
    thursday: CreateScheduleFrame[] | undefined;
    friday: CreateScheduleFrame[] | undefined;
    saturday: CreateScheduleFrame[] | undefined;
}

export interface UpsertServiceCategoryCommand {
    name: string | undefined;
    colour: string | undefined;
}

export interface UpsertServiceCommand {
    name: string | undefined;
    description: string | undefined;
    price: number;
    duration: string;
    serviceCategoryId: string | undefined;
}

export interface WeatherForecast {
    date: moment.Moment;
    temperatureC: number;
    readonly temperatureF: number;
    summary: string | undefined;
}

export class ApiException extends Error {
    message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): any {
    if (result !== null && result !== undefined)
        throw result;
    else
        throw new ApiException(message, status, response, headers, null);
}

function isAxiosError(obj: any | undefined): obj is AxiosError {
    return obj && obj.isAxiosError === true;
}
